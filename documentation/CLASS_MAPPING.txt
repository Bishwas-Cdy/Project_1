================================================================================
                         CLASS MAPPING GUIDE
                  Ranjana Script Character Reference
================================================================================

IMPORTANT: Model outputs class IDs from 0-74 (75 total classes)!

The model predicts a class number from 0 to 74. You can map these to your
own character names or folder structure as needed.

================================================================================
                     COMPLETE CLASS MAPPING
================================================================================

Total Classes: 75
Class Range: 0-74 (inclusive)
Input Size: 64×64 pixels (grayscale)

Model Class | Character Type | Notes
------------|----------------|-------
     0      | Character 1    | 
     1      | Character 2    |
     2      | Character 3    |
     3      | Character 4    |
     4      | Character 5    |
     5      | Character 6    |
     6      | Character 7    |
     7      | Character 8    |
     8      | Character 9    |
     9      | Character 10   |
    10      | Character 11   |
    11      | Character 12   |
    12      | Character 13   |
    13      | Character 14   |
    14      | Character 15   |
    15      | Character 16   |
    16      | Character 17   |
    17      | Character 18   |
    18      | Character 19   |
    19      | Character 20   |
    20      | Character 21   |
    21      | Character 22   |
    22      | Character 23   |
    23      | Character 24   |
    24      | Character 25   |
    25      | Character 26   |
    26      | Character 27   |
    27      | Character 28   |
    28      | Character 29   |
    29      | Character 30   |
    30      | Character 31   |
    31      | Character 32   |
    32      | Character 33   |
    33      | Character 34   |
    34      | Character 35   |
    35      | Character 36   |
    36      | Character 37   |
    37      | Character 38   |
    38      | Character 39   |
    39      | Character 40   |
    40      | Character 41   |
    41      | Character 42   |
    42      | Character 43   |
    43      | Character 44   |
    44      | Character 45   |
    45      | Character 46   |
    46      | Character 47   |
    47      | Character 48   |
    48      | Character 49   |
    49      | Character 50   |
    50      | Character 51   |
    51      | Character 52   |
    52      | Character 53   |
    53      | Character 54   |
    54      | Character 55   |
    55      | Character 56   |
    56      | Character 57   |
    57      | Character 58   |
    58      | Character 59   |
    59      | Character 60   |
    60      | Character 61   |
    61      | Character 62   |
    62      | Character 63   |
    63      | Character 64   |
    64      | Character 65   |
    65      | Character 66   |
    66      | Character 67   |
    67      | Character 68   |
    68      | Character 69   |
    69      | Character 70   |
    70      | Character 71   |
    71      | Character 72   |
    72      | Character 73   |
    73      | Character 74   |
    74      | Character 75   | Last class (74 is the highest)

================================================================================
                     USAGE EXAMPLES
================================================================================

Example 1: Get predicted class
-------------------------------
```python
import sys
sys.path.insert(0, 'src')
from inference import RanjanaInference

model = RanjanaInference('efficientnet_b0')
result = model.predict('character.png')

print(f"Predicted class: {result['class']}")  # e.g., 39
print(f"Confidence: {result['confidence']:.2f}%")  # e.g., 95.32%
```

Example 2: Get top 5 predictions
---------------------------------
```python
classes, probs = model.classify('character.png', top_k=5)

for i, (cls, prob) in enumerate(zip(classes, probs)):
    print(f"Rank {i+1}: Class {cls} ({prob*100:.2f}%)")
```

Output:
  Rank 1: Class 39 (95.32%)
  Rank 2: Class 41 (2.15%)
  Rank 3: Class 58 (1.23%)
  Rank 4: Class 45 (0.89%)
  Rank 5: Class 49 (0.41%)

================================================================================
                        IMPORTANT NOTES
================================================================================

 Model Output: 0-74 (75 classes total, not 62!)
 Input: 64×64 grayscale images (auto-resized)
 Confidence: Returned as 0-1 (multiply by 100 for percentage)
 Top-K: You can request 1-75 top predictions

 Common Mistakes:
  - Don't assume 62 classes (it's 75!)
  - Don't forget to add src/ to Python path
  - Don't confuse folder names with class IDs (they're independent)

================================================================================
                         END OF MAPPING
================================================================================
    60      |     61      | Special
    61      |     62      | Special

================================================================================
                      CHARACTER CATEGORIES
================================================================================

Consonants: Classes 0-34 (Folders 1-35)
  - Total: 35 characters
  - Most common category
  
Vowels: Classes 35-46 (Folders 36-47)
  - Total: 12 characters
  
Numerals: Classes 47-56 (Folders 48-57)
  - Total: 10 characters (0-9)
  
Special Characters: Classes 57-61 (Folders 58-62)
  - Total: 5 characters
  - Punctuation and special symbols

================================================================================
                      USAGE IN CODE
================================================================================

Example 1: Convert model prediction to folder name
---------------------------------------------------
```python
from src.inference import RanjanaInference

model = RanjanaInference('efficientnet_b0')
classes, probs = model.classify('character.png')

predicted_class = classes[0]  # e.g., 15
folder_name = predicted_class + 1  # 16

print(f'Model predicted class: {predicted_class}')
print(f'Folder name: {folder_name}')
```


Example 2: Batch prediction with folder names
----------------------------------------------
```python
import os

image_paths = ['img1.png', 'img2.png', 'img3.png']
results = model.classify_batch(image_paths)

for img_path, (classes, probs) in zip(image_paths, results):
    predicted_class = classes[0]
    folder_name = predicted_class + 1
    confidence = probs[0]
    
    print(f'{os.path.basename(img_path)}:')
    print(f'  Class: {predicted_class}')
    print(f'  Folder: {folder_name}')
    print(f'  Confidence: {confidence:.2%}')
```


Example 3: Determine character type
------------------------------------
```python
def get_character_type(class_id):
    if 0 <= class_id <= 34:
        return 'Consonant'
    elif 35 <= class_id <= 46:
        return 'Vowel'
    elif 47 <= class_id <= 56:
        return 'Numeral'
    elif 57 <= class_id <= 61:
        return 'Special'
    else:
        return 'Unknown'

classes, probs = model.classify('test.png')
predicted_class = classes[0]
char_type = get_character_type(predicted_class)

print(f'Character type: {char_type}')
```


Example 4: Filter by character type
------------------------------------
```python
# Only classify numerals
classes, probs = model.classify('test.png', top_k=10)

numerals = []
for cls, prob in zip(classes, probs):
    if 47 <= cls <= 56:  # Numeral range
        numerals.append((cls, prob))

if numerals:
    print('Numeral predictions:')
    for cls, prob in numerals:
        numeral_value = cls - 47  # 0-9
        print(f'  {numeral_value}: {prob:.2%}')
```


================================================================================
                    REFERENCE IMAGE NAMING
================================================================================

If you have reference images for each character:

Option 1: Name by model class (0-61)
-------------------------------------
references/
   0.png    # Folder 1
   1.png    # Folder 2
   2.png    # Folder 3
  ...
   61.png   # Folder 62


Option 2: Name by folder (1-62)
--------------------------------
references/
   1.png
   2.png
   3.png
  ...
   62.png

Then when loading:
```python
folder_name = 15
reference_path = f'references/{folder_name}.png'

# Or from model class
predicted_class = 14
reference_path = f'references/{predicted_class + 1}.png'
```


================================================================================
                       VALIDATION HELPER
================================================================================

Use this function to validate class/folder conversions:

```python
def validate_class_mapping(class_id=None, folder_name=None):
    """Validate and convert between class ID and folder name."""
    
    if class_id is not None:
        # Convert class to folder
        if not (0 <= class_id <= 61):
            raise ValueError(f'Invalid class ID: {class_id} (must be 0-61)')
        
        folder = class_id + 1
        char_type = get_character_type(class_id)
        
        return {
            'class_id': class_id,
            'folder_name': folder,
            'character_type': char_type,
            'valid': True
        }
    
    elif folder_name is not None:
        # Convert folder to class
        if not (1 <= folder_name <= 62):
            raise ValueError(f'Invalid folder: {folder_name} (must be 1-62)')
        
        class_id = folder_name - 1
        char_type = get_character_type(class_id)
        
        return {
            'class_id': class_id,
            'folder_name': folder_name,
            'character_type': char_type,
            'valid': True
        }
    
    else:
        raise ValueError('Provide either class_id or folder_name')


# Usage
info = validate_class_mapping(class_id=15)
print(info)
# {'class_id': 15, 'folder_name': 16, 'character_type': 'Consonant', 'valid': True}

info = validate_class_mapping(folder_name=50)
print(info)
# {'class_id': 49, 'folder_name': 50, 'character_type': 'Numeral', 'valid': True}
```


================================================================================
                         IMPORTANT NOTES
================================================================================

1. ALWAYS ADD 1 TO MODEL OUTPUT:
   - Model outputs: 0-61
   - Folder names: 1-62
   - Don't forget this conversion!

2. ARRAY INDEXING:
   - Python arrays are 0-indexed (matches model output)
   - Folder names are 1-indexed
   - Be careful when iterating!

3. TOP-K PREDICTIONS:
   - All returned classes are in range 0-61
   - Convert each one individually to folder name

4. VALIDATION:
   - Always validate class IDs are in range 0-61
   - Always validate folder names are in range 1-62

5. DATASET STRUCTURE:
   - Training data is organized by folder (1-62)
   - Model was trained with labels 0-61
   - This mapping is permanent and cannot be changed

================================================================================

END OF CLASS MAPPING GUIDE

================================================================================
