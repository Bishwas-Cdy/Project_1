62 reference images:
  - class_0.png  (for model class 0, dataset folder 1)
  - class_1.png  (for model class 1, dataset folder 2)
  - class_2.png  (for model class 2, dataset folder 3)
  ...
  - class_61.png (for model class 61, dataset folder 62)

Total size: ~150 KB (all images are 64×64 grayscale)


================================================================================
                        HOW IT WORKS
================================================================================

USER FLOW:
----------

1. User uploads ONE image from Flutter app
   Example: student_handwriting.png

2. Backend receives image and processes:
   
   a) Classify the image
      → Model predicts: "This is class 23"
   
   b) Load reference image
      → Backend loads: references/class_23.png
   
   c) Compare similarity
      → Model compares user image to reference
      → Returns: 85% similarity
   
   d) Send response to Flutter
      → {
           "character_class": 23,
           "confidence": 96.5,
           "similarity_score": 85.2,
           "quality": "Excellent"
         }


================================================================================
                    BACKEND IMPLEMENTATION
================================================================================

FILE: examples/example_auto_similarity.py

Copy this function to your backend:

```python
def analyze_character_with_similarity(user_image_path, model):
    """
    Analyze user's handwriting and compare to reference
    
    Args:
        user_image_path: Path to uploaded image
        model: RanjanaInference instance
    
    Returns:
        dict with predicted_class, confidence, similarity, distance
    """
    # Step 1: Classify
    result = model.predict(user_image_path, top_k=1)
    predicted_class = result['class']
    confidence = result['confidence']
    
    # Step 2: Get reference
    reference_image = f'references/class_{predicted_class}.png'
    
    # Step 3: Compare
    similarity, distance = model.compute_similarity(
        user_image_path, 
        reference_image
    )
    
    return {
        'predicted_class': predicted_class,
        'confidence': confidence,
        'similarity': similarity,
        'distance': distance
    }
```


================================================================================
                    WHAT TO SEND TO FLUTTER
================================================================================

JSON Response Format:
---------------------

{
  "character_class": 23,          // Which Ranjana character (0-61)
  "confidence": 96.5,             // How sure the model is (%)
  "similarity_score": 85.2,       // How similar to reference (%)
  "quality": "Excellent",         // Excellent/Good/Fair/Poor
  "message": "Detected character class 23 with 96.5% confidence"
}


Quality Rating Logic:
---------------------
- similarity >= 80% → "Excellent"
- similarity >= 60% → "Good"
- similarity >= 40% → "Fair"
- similarity < 40%  → "Poor"


================================================================================
                    FILES YOUR TEAMMATE NEEDS
================================================================================

1. DEPLOYMENT_PACKAGE/references/       (62 reference images)
2. DEPLOYMENT_PACKAGE/models/*.pth       (2 model files)
3. DEPLOYMENT_PACKAGE/src/               (inference code)
4. DEPLOYMENT_PACKAGE/requirements.txt   (dependencies)
5. examples/example_auto_similarity.py   (implementation example)


Total size: ~122 MB


================================================================================
                    TESTING THE SYSTEM
================================================================================

Run the demo:
-------------
cd DEPLOYMENT_PACKAGE
python examples/example_auto_similarity.py

Expected output:
----------------
✓ Model loaded
Testing with: random test image
Predicted Class: 0
Confidence: 99.6%
Similarity to Reference: 88.7%
Quality: Excellent


================================================================================
                    KEY POINTS FOR YOUR TEAMMATE
================================================================================

✓ User uploads ONLY ONE image (not two)
✓ Backend automatically compares to reference
✓ Reference images are already created (62 images)
✓ Model outputs class 0-61 (not 1-62!)
✓ Similarity score tells how good the handwriting is
✓ Everything is in DEPLOYMENT_PACKAGE folder


================================================================================
                    IMPORTANT CLASS MAPPING
================================================================================

Dataset Folder → Model Class → Reference File
----------------------------------------------
Folder 1       → Class 0      → class_0.png
Folder 2       → Class 1      → class_1.png
Folder 3       → Class 2      → class_2.png
...
Folder 62      → Class 61     → class_61.png

Remember: Model uses 0-based indexing!


================================================================================
                    ADVANTAGES OF THIS APPROACH
================================================================================

✓ Simple user experience (upload 1 image, not 2)
✓ Consistent reference images for all users
✓ Automatic quality assessment
✓ No need for users to provide reference
✓ Fast processing (~100ms total)
✓ Works offline (all references stored locally)


================================================================================
                    API ENDPOINT EXAMPLE (Flask)
================================================================================

@app.route('/analyze_character', methods=['POST'])
def analyze_character():
    # Receive image from Flutter
    image_file = request.files['image']
    image_path = save_uploaded_file(image_file)
    
    # Analyze
    result = analyze_character_with_similarity(image_path, model)
    
    # Add quality rating
    similarity = result['similarity']
    if similarity >= 80:
        quality = "Excellent"
    elif similarity >= 60:
        quality = "Good"
    elif similarity >= 40:
        quality = "Fair"
    else:
        quality = "Poor"
    
    # Return JSON
    return jsonify({
        "character_class": result['predicted_class'],
        "confidence": round(result['confidence'], 2),
        "similarity_score": round(similarity, 2),
        "quality": quality,
        "message": f"Character detected with {result['confidence']:.1f}% confidence"
    })


================================================================================
                    TROUBLESHOOTING
================================================================================

Q: Reference images not found?
A: Make sure references/ folder is in same directory as your script

Q: Wrong similarity scores?
A: Check that image preprocessing is correct (64×64 grayscale)

Q: Model predicts wrong class?
A: User image might be too different from training data (blur, rotation)

Q: Similarity always low?
A: Reference might not be representative, try picking better reference images


================================================================================
                    NEXT STEPS FOR YOUR TEAMMATE
================================================================================

1. Copy DEPLOYMENT_PACKAGE folder to backend server
2. Install requirements: pip install -r requirements.txt
3. Test with example: python examples/example_auto_similarity.py
4. Integrate into Flask/Django/FastAPI backend
5. Create API endpoint that accepts image upload
6. Return JSON response to Flutter app


================================================================================
                    CONTACT INFO
================================================================================

Questions? Check these files:
- DEPLOYMENT_PACKAGE/documentation/API_REFERENCE.txt
- DEPLOYMENT_PACKAGE/documentation/INTEGRATION_GUIDE.txt
- DEPLOYMENT_PACKAGE/examples/example_auto_similarity.py

Everything is ready to go! Just integrate the code above.

================================================================================
