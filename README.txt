================================================================================
                 RANJANA SCRIPT INTELLIGENT HANDWRITING TUTOR
                        DEPLOYMENT PACKAGE v1.0
                         Created: October 19, 2025
================================================================================

üëã HEY TEAMMATES! This package contains EVERYTHING you need to integrate
   the Ranjana Script AI models into your Flutter app and Django backend!

================================================================================
                           üì¶ WHAT'S INSIDE
================================================================================

DEPLOYMENT_PACKAGE/
‚îú‚îÄ‚îÄ models/                              ‚Üê TRAINED MODELS (27 MB total)
‚îÇ   ‚îú‚îÄ‚îÄ efficientnet_b0_best.pth        ‚Üê Classification model (99.5% accuracy)
‚îÇ   ‚îî‚îÄ‚îÄ siamese_efficientnet_b0_best.pth ‚Üê Similarity model (92.7% accuracy)
‚îÇ
‚îú‚îÄ‚îÄ src/                                 ‚Üê SOURCE CODE (Python)
‚îÇ   ‚îú‚îÄ‚îÄ inference.py                    ‚Üê MAIN API (USE THIS!)
‚îÇ   ‚îú‚îÄ‚îÄ gradcam.py                      ‚Üê Visualization code
‚îÇ   ‚îú‚îÄ‚îÄ siamese_network.py              ‚Üê Similarity network
‚îÇ   ‚îú‚îÄ‚îÄ models.py                       ‚Üê Classification architecture
‚îÇ   ‚îú‚îÄ‚îÄ config.py                       ‚Üê Constants
‚îÇ   ‚îî‚îÄ‚îÄ data_loader.py                  ‚Üê Data utilities
‚îÇ
‚îú‚îÄ‚îÄ examples/                            ‚Üê EXAMPLE CODE (start here!)
‚îÇ   ‚îú‚îÄ‚îÄ example_basic_usage.py          ‚Üê Simple examples
‚îÇ   ‚îú‚îÄ‚îÄ example_flask_api.py            ‚Üê Flask REST API
‚îÇ   ‚îî‚îÄ‚îÄ example_batch_processing.py     ‚Üê Process multiple images
‚îÇ
‚îú‚îÄ‚îÄ documentation/                       ‚Üê FULL DOCUMENTATION
‚îÇ   ‚îú‚îÄ‚îÄ API_REFERENCE.txt               ‚Üê All functions explained
‚îÇ   ‚îú‚îÄ‚îÄ INTEGRATION_GUIDE.txt           ‚Üê How to integrate
‚îÇ   ‚îú‚îÄ‚îÄ TROUBLESHOOTING.txt             ‚Üê Common issues & fixes
‚îÇ   ‚îî‚îÄ‚îÄ CLASS_MAPPING.txt               ‚Üê Class IDs to characters
‚îÇ
‚îú‚îÄ‚îÄ config.yaml                          ‚Üê Configuration file
‚îú‚îÄ‚îÄ requirements.txt                     ‚Üê Python dependencies
‚îî‚îÄ‚îÄ README.txt                           ‚Üê THIS FILE!

================================================================================
                        ‚ö° QUICK START (5 MINUTES)
================================================================================

STEP 1: Install Python Dependencies
------------------------------------
cd DEPLOYMENT_PACKAGE
pip install -r requirements.txt

(Installs: torch, torchvision, pillow, numpy, opencv-python)


STEP 2: Test the Models
------------------------
python examples/example_basic_usage.py

This will:
‚úì Load both models
‚úì Test classification on a sample image
‚úì Test similarity comparison
‚úì Generate Grad-CAM visualization


STEP 3: Choose Your Integration Path
-------------------------------------

Option A: Python Backend (Django/Flask)
   ‚Üí Use src/inference.py directly
   ‚Üí See examples/example_flask_api.py
   ‚Üí Models run on your server

Option B: Mobile App (Flutter)
   ‚Üí Convert models to ONNX or TFLite
   ‚Üí See documentation/INTEGRATION_GUIDE.txt
   ‚Üí Models run on-device

Option C: Hybrid (Recommended!)
   ‚Üí Backend API for heavy processing
   ‚Üí On-device for simple tasks
   ‚Üí Best of both worlds!

================================================================================
                        üéØ THE 3 CORE FEATURES
================================================================================

1Ô∏è‚É£ CLASSIFICATION (Branch 1)
   What: Identifies which Ranjana character (1-62)
   Accuracy: 99.5%
   Input: Single 64√ó64 grayscale image
   Output: Class ID + confidence

   Example:
   ```python
   from src.inference import RanjanaInference
   model = RanjanaInference('efficientnet_b0')
   classes, probs = model.classify('student_image.png')
   print(f"Predicted: Class {classes[0]}, Confidence: {probs[0]:.2%}")
   ```


2Ô∏è‚É£ SIMILARITY SCORING (Branch 2)
   What: Compares two characters, gives similarity 0-100%
   Accuracy: 92.7%
   Input: Two 64√ó64 grayscale images
   Output: Similarity percentage + distance

   Example:
   ```python
   similarity, distance = model.compute_similarity(
       'student_ka.png',
       'reference_ka.png'
   )
   print(f"Similarity: {similarity:.1f}%")
   ```


3Ô∏è‚É£ GRAD-CAM VISUALIZATION (Branch 3)
   What: Shows where the model is looking (heatmap)
   Use: Help students see mistakes
   Input: Single image
   Output: Heatmap overlay image

   Example:
   ```python
   result = model.generate_gradcam(
       'student_image.png',
       save_path='heatmap.png'
   )
   print(f"Predicted: {result['predicted_class']}")
   # Heatmap saved to heatmap.png
   ```

================================================================================
                     üîß SYSTEM REQUIREMENTS
================================================================================

MINIMUM:
- Python 3.8+
- 2 GB RAM
- 500 MB disk space
- CPU is fine (no GPU needed for inference!)

RECOMMENDED:
- Python 3.10+
- 4 GB RAM
- GPU (optional, makes it faster)

TESTED ON:
‚úì Ubuntu 22.04 (Python 3.13)
‚úì Windows 10/11
‚úì macOS (M1/M2 chips supported!)

================================================================================
                       üì± FOR FLUTTER DEVELOPERS
================================================================================

You have 2 options:

OPTION 1: Call Backend API
---------------------------
‚úì Easiest to implement
‚úì Models stay on server
‚úì Always up-to-date
‚úì No model conversion needed

1. Your Django friend creates REST API endpoints:
   POST /api/classify       (Branch 1)
   POST /api/similarity     (Branch 2)
   POST /api/gradcam        (Branch 3)

2. You make HTTP requests from Flutter:
   ```dart
   final response = await http.post(
     Uri.parse('https://yourserver.com/api/classify'),
     body: {'image': base64Image},
   );
   ```

3. Done! ‚úì


OPTION 2: On-Device Inference
------------------------------
‚úì Works offline
‚úì Faster (no network delay)
‚úì More private
‚úó Requires model conversion

1. Convert models to TFLite:
   See documentation/INTEGRATION_GUIDE.txt
   Section: "Converting to TensorFlow Lite"

2. Use tflite_flutter package:
   https://pub.dev/packages/tflite_flutter

3. Load models and run inference in Dart

================================================================================
                       üåê FOR DJANGO DEVELOPERS
================================================================================

QUICK SETUP:
------------

1. Create Django view:
```python
import sys
sys.path.insert(0, 'DEPLOYMENT_PACKAGE/src')
from inference import RanjanaInference

# Initialize once (at startup)
classifier = RanjanaInference(
    'efficientnet_b0',
    checkpoint_path='DEPLOYMENT_PACKAGE/models/efficientnet_b0_best.pth',
    device='cpu'  # or 'cuda' if you have GPU
)

# In your view
def classify_image(request):
    if request.method == 'POST':
        image = request.FILES['image']
        
        # Save temp
        temp_path = '/tmp/temp_image.png'
        with open(temp_path, 'wb') as f:
            f.write(image.read())
        
        # Classify
        classes, probs = classifier.classify(temp_path)
        
        return JsonResponse({
            'predicted_class': int(classes[0]),
            'confidence': float(probs[0]),
            'top_5_classes': classes.tolist(),
            'top_5_confidences': probs.tolist()
        })
```

2. See examples/example_flask_api.py for complete REST API!

3. Deploy on:
   - Heroku (with buildpack)
   - AWS EC2
   - DigitalOcean
   - Your own server

================================================================================
                         ‚öôÔ∏è CONFIGURATION
================================================================================

Edit config.yaml to customize:

- Image size (default: 64√ó64)
- Number of classes (default: 62)
- Similarity threshold (default: 0.45)
- Device preference (CPU/GPU)

================================================================================
                      üéì CLASS MAPPING (62 CLASSES)
================================================================================

Classes 0-35:  Consonants (‡§ï, ‡§ñ, ‡§ó, ‡§ò, etc.)
Classes 36-51: Vowels (‡§Ö, ‡§Ü, ‡§á, ‡§à, etc.)
Classes 52-61: Numerals (‡•¶-‡•Ø)

Folder "1" ‚Üí Class 0 (first consonant)
Folder "2" ‚Üí Class 1 (second consonant)
...
Folder "62" ‚Üí Class 61 (last numeral)

Full mapping in: documentation/CLASS_MAPPING.txt

================================================================================
                       üêõ TROUBLESHOOTING
================================================================================

PROBLEM: "ModuleNotFoundError: No module named 'torch'"
SOLUTION: pip install -r requirements.txt

PROBLEM: Models load but give wrong predictions
SOLUTION: Check image preprocessing:
   - Must be 64√ó64 pixels
   - Must be grayscale
   - Must be normalized (mean=0.2611, std=0.4186)

PROBLEM: "CUDA out of memory"
SOLUTION: Use device='cpu' instead of 'cuda'

PROBLEM: Similarity always returns high/low scores
SOLUTION: Check that both images are preprocessed the same way

See documentation/TROUBLESHOOTING.txt for more!

================================================================================
                        üìä MODEL PERFORMANCE
================================================================================

CLASSIFICATION MODEL:
‚úì Test Accuracy: 99.50%
‚úì Stress Test: 100% (100/100 samples)
‚úì Average Confidence: 95%+
‚úì Inference Time: ~50ms per image (CPU)

SIMILARITY MODEL:
‚úì Test Accuracy: 92.71%
‚úì ROC-AUC: 0.9726
‚úì Optimal Threshold: 0.45
‚úì False Positive Rate: <5%
‚úì Inference Time: ~100ms per pair (CPU)

GRAD-CAM:
‚úì Works on any classification input
‚úì No additional model needed
‚úì Inference Time: ~60ms per image

================================================================================
                        üìû CONTACT & SUPPORT
================================================================================

Model Developer: Bishwas
Date: October 19, 2025
Project: Ranjana Script Intelligent Handwriting Tutor

If you run into issues:
1. Check documentation/TROUBLESHOOTING.txt
2. Check examples/ for working code
3. Contact Bishwas

================================================================================
                          üìÑ LICENSE & USAGE
================================================================================

This is a GROUP PROJECT for educational purposes.

Models and code are provided as-is for integration into the
Flutter mobile app and Django web application.

DO:
‚úì Use in your Flutter/Django app
‚úì Modify code as needed
‚úì Deploy to production
‚úì Share with team members

DON'T:
‚úó Redistribute models publicly
‚úó Claim as your own work
‚úó Use for commercial purposes without permission

================================================================================
                       üéâ YOU'RE ALL SET!
================================================================================

Next Steps:
1. Run examples/example_basic_usage.py to verify everything works
2. Read documentation/INTEGRATION_GUIDE.txt for your platform
3. Start integrating into your app!

The models are PRODUCTION READY - tested and verified! üöÄ

Good luck with your project! üí™

================================================================================
